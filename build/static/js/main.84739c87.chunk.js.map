{"version":3,"sources":["components/Nav.tsx","contex/TargetsReducer.tsx","contex/TargetsState.tsx","components/Targets/Target.tsx","components/Targets/Targets.tsx","components/Construction.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","className","exact","to","state","action","type","targets","payload","initialState","TargetsContext","createContext","TargetContextProvider","props","useReducer","TargetsReducer","dispatch","Provider","value","fetchDataAction","children","Target","target","useState","modal","setModal","animation","setAnimation","document","title","handleModal","setTimeout","e","src","image","alt","name","onClick","price","Targets","useContext","useEffect","length","TARGETS","map","key","id","withRouter","match","params","charAt","toUpperCase","slice","App","path","component","Construction","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84739c87.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default function Nav() {\r\n  return (\r\n    <nav className=\"nav_background p-4 border-b-4 border-black \">\r\n      <ul className=\"flex justify-evenly text-5xl font-sofia  font-bold flex-wrap\">\r\n        <li className=\"cursor-pointer transform transition duration-500 ease-in hover:scale-110\">\r\n          <NavLink exact to=\"/\">\r\n            Targets\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"cursor-pointer transform transition duration-500 ease-in hover:scale-110\">\r\n          <NavLink to=\"/map\">\r\n            Map\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"cursor-pointer transform transition duration-500 ease-in hover:scale-110\">\r\n          <NavLink to=\"/account\">\r\n            Account\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import { Itargets } from './Interfaces';\r\n\r\nexport default (state: Itargets, action: any): Itargets => {\r\n  switch (action.type) {\r\n\r\n    case 'FETCH_DATA_ACTION':\r\n      return { ...state,  targets: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n","import React, { useReducer, createContext, ReactNode } from 'react';\r\nimport TargetsReducer from './TargetsReducer';\r\nimport { Itargets } from './Interfaces';\r\nimport { targets } from '../data/targets.json';\r\n\r\nconst initialState: Itargets = {\r\n  targets: [],\r\n};\r\n\r\nexport const TargetsContext = createContext<Itargets | any>(initialState);\r\n\r\nexport type ContexProviderProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport function TargetContextProvider(props: ContexProviderProps) {\r\n  const [state, dispatch] = useReducer(TargetsReducer, initialState);\r\n\r\n  const fetchDataAction = () => {\r\n    dispatch({\r\n      type: 'FETCH_DATA_ACTION',\r\n      payload: targets,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TargetsContext.Provider\r\n      value={{ targets: state.targets, dispatch, fetchDataAction }}\r\n    >\r\n      {props.children}\r\n    </TargetsContext.Provider>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Itarget } from '../../contex/Interfaces';\r\n\r\nconst Target = (target: Itarget) => {\r\n  const [modal, setModal] = useState(false);\r\n  const [animation, setAnimation] = useState(true);\r\n  document.title = 'target';\r\n\r\n  const handleModal = () => {\r\n    switch (animation) {\r\n      case true: {\r\n        setTimeout((e) => {\r\n          setAnimation(false);\r\n        }, 200);\r\n        setModal(true);\r\n        setTimeout((e) => {}, 200);\r\n\r\n        break;\r\n      }\r\n      case false:\r\n        setAnimation(true);\r\n        setTimeout((e) => {\r\n          setModal(false);\r\n        }, 500);\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"overflow-hidden \">\r\n        <img\r\n          src={target.image}\r\n          alt={target.name}\r\n          className=\"cursor-pointer  transition duration-500 ease-in transform hover:scale-125\"\r\n          onClick={handleModal}\r\n        />\r\n        {modal && (\r\n          <div\r\n            className={`bg-black bg-opacity-75 h-full w-full absolute top-0 left-0 lg:py-8 cursor-pointer z-10 lg:flex lg:items-center transition duration-500 ease-in  ${\r\n              animation ? 'opacity-0' : 'opacity-100'\r\n            }`}\r\n            onClick={handleModal}\r\n          >\r\n            <img\r\n              src={target.image}\r\n              alt={target.name}\r\n              className=\"lg:w-4/5 z-20 relative cursor-default mx-auto \"\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"relative target_description_background font-sofia  p-2\">\r\n          <h2 className=\"font-bold text-3xl\">{target.name}</h2>\r\n          <p className=\"text-2xl\">Price: {target.price} </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Target;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { TargetsContext } from '../../contex/TargetsState';\r\nimport Target from './Target';\r\nimport { Itarget } from '../../contex/Interfaces';\r\n\r\nconst Targets = () => {\r\n  const { targets, fetchDataAction } = useContext(TargetsContext);\r\n\r\n  useEffect(() => {\r\n    targets.length=== 0 && fetchDataAction();\r\n  });\r\n\r\n  const TARGETS = targets && targets.map((e:Itarget)=>{\r\n    return (\r\n      <li key={e.id} className=\"w-full h-full lg:w-2/5 flex flex-wrap justify-center  p-2\">\r\n        <Target {...e} />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"targets_background flex-grow\">\r\n      <ul className=\"flex flex-wrap justify-evenly\">\r\n        {TARGETS}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default  Targets;\r\n\r\n","import React from 'react';\r\nimport { RouteComponentProps, withRouter  } from 'react-router-dom';\r\n\r\ninterface IMatchParams {\r\n  id: string;\r\n}\r\n\r\nconst Construction:React.FC<RouteComponentProps<IMatchParams>>  = ({ match }) => {\r\n  document.title=match.params.id;\r\n  return (\r\n    <section className=\"flex h-full justify-center items-center bg-gray-700\">\r\n      <h1 className=\"text-red-700 font-bold text-6xl stroke-black font-sofia text-shadow\">{match.params.id.charAt(0).toUpperCase() + match.params.id.slice(1)} Site under construction</h1>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withRouter(Construction);","import React from 'react';\nimport './App.css';\nimport './assets/main.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Nav from './components/Nav';\nimport Targets from './components/Targets/Targets';\nimport Construction from './components/Construction';\nimport { TargetContextProvider } from './contex/TargetsState';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Nav />\n      <Switch>\n        <TargetContextProvider>\n          <Route exact path=\"/\" component={Targets} />\n          <Route exact path=\"/:id\" component={Construction} />\n        </TargetContextProvider>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}